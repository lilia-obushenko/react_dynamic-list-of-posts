{"version":3,"sources":["components/PostItem/PostItem.tsx","components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm/NewCommentForm.tsx","hooks/useForm.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","api/users.ts","api/posts.ts","index.tsx"],"names":["PostItem","props","post","onPostSelect","selectedPostId","id","title","isSelected","_jsxs","children","_jsx","className","type","cn","onClick","postId","PostsList","posts","map","Loader","NewCommentForm","onAddComment","isLoading","_useForm","options","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","commentText","setCommentText","_useState7","_useState8","nameError","setNameError","_useState9","_useState10","emailError","setEmailError","_useState11","_useState12","notValidEmail","setNotValidEmail","_useState13","_useState14","commentError","setCommentError","emailRegex","handleClear","handleSubmit","event","preventDefault","trim","test","body","handleEmailChange","target","value","handleNameChange","handleTextChange","useForm","onSubmit","htmlFor","placeholder","onChange","request","url","delay","data","arguments","length","undefined","method","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","client","addComment","newComment","removeComment","commentId","concat","PostDetails","selectedPost","comments","setComments","isFormVisible","setIsFormVisible","setIsLoading","isError","setIsError","fetchComments","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","commentsFromServer","wrap","_context","prev","next","sent","t0","finish","stop","apply","addNewComment","useCallback","_ref2","_callee2","commentToAdd","comment","_context2","_objectSpread","prevState","_toConsumableArray","_x","deleteComment","_ref3","_callee3","_context3","filter","_ref4","_x2","noComments","isVisibleButton","useEffect","href","UserSelector","users","onUserSelect","isOpen","setIsOpen","currentUser","setCurrentUser","dropdown","useRef","handleClick","_dropdown$current","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleSelect","App","setUsers","setPosts","selectedUserId","setSelectedUserId","setSelectedPostId","noPosts","setNoPosts","fetchUsers","usersFromServer","fetchUserPosts","postsFromServer","handleSelectUser","useMemo","find","ReactDOM","render","getElementById"],"mappings":"8RAUaA,EAAsB,SAACC,GAClC,IAAQC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,aAAcC,EAAmBH,EAAnBG,eACpBC,EAAcH,EAAdG,GAAIC,EAAUJ,EAAVI,MAYNC,EAAaH,IAAmBC,EAEtC,OACEG,eAAA,MAAI,UAAQ,OAAMC,SAAA,CAChBC,cAAA,MAAI,UAAQ,SAAQD,SACjBJ,IAGHK,cAAA,MAAI,UAAQ,YAAWD,SACpBH,IAGHI,cAAA,MAAIC,UAAU,8BAA6BF,SACzCC,cAAA,UACEE,KAAK,SACL,UAAQ,aACRD,UAAWE,IAAG,iBAAkB,CAC9B,YAAaN,IAEfO,QAAS,WA7BQ,IAACC,EAOxBZ,GAPwBY,EA6BcV,KA5BvBD,EAMFW,EALE,EA2B0B,EAACN,SAEnCF,EACG,QACA,aAKd,EC1CaS,EAAuB,SAACf,GACnC,IACEgB,EAGEhB,EAHFgB,MACAd,EAEEF,EAFFE,aACAC,EACEH,EADFG,eAGF,OACEI,eAAA,OAAK,UAAQ,YAAWC,SAAA,CACtBC,cAAA,KAAGC,UAAU,QAAOF,SAAC,WAErBD,eAAA,SAAOG,UAAU,uDAAsDF,SAAA,CACrEC,cAAA,SAAAD,SACED,eAAA,MAAIG,UAAU,4BAA2BF,SAAA,CACvCC,cAAA,MAAAD,SAAI,MACJC,cAAA,MAAAD,SAAI,UACJC,cAAA,MAAAD,SAAI,WAIRC,cAAA,SAAAD,SACGQ,EAAMC,KAAI,SAAAhB,GAAI,OACbQ,cAACV,EAAQ,CAEPE,KAAMA,EACNC,aAAcA,EACdC,eAAgBA,GAHXF,EAAKG,GAIV,WAMd,E,gBCzCac,G,MAAS,WAAH,OACjBT,cAAA,OAAKC,UAAU,SAAS,UAAQ,SAAQF,SACtCC,cAAA,OAAKC,UAAU,qBACX,GCKKS,EAA4B,SAACnB,GACxC,IAAQoB,EAA4BpB,EAA5BoB,aAAcC,EAAcrB,EAAdqB,UACtBC,ECLqB,SAACC,GACtB,IAAQH,EAAiBG,EAAjBH,aAERI,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,EAA0BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,EAAsCT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,EAAkCb,oBAAS,GAAMc,EAAAZ,YAAAW,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAAoCjB,oBAAS,GAAMkB,EAAAhB,YAAAe,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAA0CrB,oBAAS,GAAMsB,EAAApB,YAAAmB,EAAA,GAAlDE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,EAAwCzB,oBAAS,GAAM0B,EAAAxB,YAAAuB,EAAA,GAAhDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,EAAa,6BAoEnB,MAAO,CACL1B,OACAI,QACAI,cACAI,YACAI,aACAQ,eACAJ,gBACAO,YAlBkB,WAClB1B,EAAQ,IACRI,EAAS,IACTI,EAAe,IACfgB,GAAgB,GAChBR,GAAc,GACdJ,GAAa,GACbQ,GAAiB,EACnB,EAWEO,aA3EmB,SAACC,GACpBA,EAAMC,iBAED9B,EAAK+B,QACRlB,GAAa,GAGVT,EAAM2B,QACTd,GAAc,GAGXT,EAAYuB,QACfN,GAAgB,GAGbC,EAAWM,KAAK5B,IACnBiB,GAAiB,IAIhBrB,EAAK+B,SACF3B,EAAM2B,SACNvB,EAAYuB,SACZL,EAAWM,KAAK5B,KAatBZ,EANmB,CACjBQ,OACAI,QACA6B,KAAMzB,IAIRC,EAAe,IACjB,EAsCEyB,kBA/BwB,SAACL,GACzBZ,GAAc,GACdZ,EAASwB,EAAMM,OAAOC,OACtBf,GAAiB,EACnB,EA4BEgB,iBArCuB,SAACR,GACxBhB,GAAa,GACbZ,EAAQ4B,EAAMM,OAAOC,MACvB,EAmCEE,iBA3BuB,SAACT,GACxBJ,GAAgB,GAChBhB,EAAeoB,EAAMM,OAAOC,MAC9B,EA0BF,CD3EMG,CAAQ,CAAE/C,iBAZZQ,EAAIN,EAAJM,KACAI,EAAKV,EAALU,MACAI,EAAWd,EAAXc,YACAI,EAASlB,EAATkB,UACAI,EAAUtB,EAAVsB,WACAQ,EAAY9B,EAAZ8B,aACAJ,EAAa1B,EAAb0B,cACAQ,EAAYlC,EAAZkC,aACAD,EAAWjC,EAAXiC,YACAO,EAAiBxC,EAAjBwC,kBACAG,EAAgB3C,EAAhB2C,iBACAC,EAAgB5C,EAAhB4C,iBAGF,OACE3D,eAAA,QACE,UAAQ,iBACR6D,SAAUZ,EAAahD,SAAA,CAEvBD,eAAA,OAAKG,UAAU,QAAQ,UAAQ,YAAWF,SAAA,CACxCC,cAAA,SAAOC,UAAU,QAAQ2D,QAAQ,sBAAqB7D,SAAC,gBAIvDD,eAAA,OAAKG,UAAU,yCAAwCF,SAAA,CACrDC,cAAA,SACEE,KAAK,OACLiB,KAAK,OACLoC,MAAOpC,EACPxB,GAAG,sBACHkE,YAAY,eACZ5D,UAAWE,IAAG,QAAS,CACrB,YAAa4B,IAEf+B,SAAUN,IAGZxD,cAAA,QAAMC,UAAU,wBAAuBF,SACrCC,cAAA,KAAGC,UAAU,kBAGd8B,GACC/B,cAAA,QACEC,UAAU,yCACV,UAAQ,YAAWF,SAEnBC,cAAA,KAAGC,UAAU,qCAKlB8B,GACC/B,cAAA,KAAGC,UAAU,iBAAiB,UAAQ,eAAcF,SAAC,wBAMzDD,eAAA,OAAKG,UAAU,QAAQ,UAAQ,aAAYF,SAAA,CACzCC,cAAA,SAAOC,UAAU,QAAQ2D,QAAQ,uBAAsB7D,SAAC,iBAIxDD,eAAA,OAAKG,UAAU,yCAAwCF,SAAA,CACrDC,cAAA,SACEE,KAAK,OACLiB,KAAK,QACLoC,MAAOhC,EACP5B,GAAG,uBACHkE,YAAY,iBACZ5D,UAAWE,IAAG,QAAS,CACrB,YAAagC,IAEf2B,SAAUT,IAGZrD,cAAA,QAAMC,UAAU,wBAAuBF,SACrCC,cAAA,KAAGC,UAAU,sBAGdkC,GACCnC,cAAA,QACEC,UAAU,yCACV,UAAQ,YAAWF,SAEnBC,cAAA,KAAGC,UAAU,qCAKlBkC,GACCnC,cAAA,KAAGC,UAAU,iBAAiB,UAAQ,eAAcF,SAAC,uBAKpDoC,GAAcI,GACfvC,cAAA,KAAGC,UAAU,iBAAiB,UAAQ,eAAcF,SAAC,0BAMzDD,eAAA,OAAKG,UAAU,QAAQ,UAAQ,YAAWF,SAAA,CACxCC,cAAA,SAAOC,UAAU,QAAQ2D,QAAQ,eAAc7D,SAAC,iBAIhDC,cAAA,OAAKC,UAAU,UAASF,SACtBC,cAAA,YACEL,GAAG,eACHwB,KAAK,OACLoC,MAAO5B,EACPkC,YAAY,oBACZ5D,UAAWE,IAAG,WAAY,CACxB,YAAawC,IAEfmB,SAAUL,MAIbd,GACC3C,cAAA,KAAGC,UAAU,iBAAiB,UAAQ,eAAcF,SAAC,uBAMzDD,eAAA,OAAKG,UAAU,mBAAkBF,SAAA,CAC/BC,cAAA,OAAKC,UAAU,UAASF,SACtBC,cAAA,UACEE,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,aAAcS,IACbb,SACJ,UAKHC,cAAA,OAAKC,UAAU,UAASF,SAEtBC,cAAA,UACEE,KAAK,QACLD,UAAU,0BACVG,QAAS0C,EAAY/C,SACtB,iBAOX,EEzJA,SAASgE,EACPC,GAGa,IAbDC,EAYZC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAENrD,EAAuB,CAAEwD,OAHVH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAcxB,OATID,IAEFpD,EAAQsC,KAAOmB,KAAKC,UAAUN,GAC9BpD,EAAQ2D,QAAU,CAChB,eAAgB,qCApBRR,EAyBA,IAxBL,IAAIS,SAAQ,SAAAC,GACjBC,WAAWD,EAASV,EACtB,KAuBGY,MAAK,kBAAMC,MA7BC,oCA6BgBd,EAAKlD,EAAQ,IACzC+D,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAM,GACrC,CAEO,IAAMC,EACN,SAAIjB,GAAW,OAAKD,EAAWC,EAAI,EAD7BiB,EAEL,SAAIjB,EAAaE,GAAS,OAAKH,EAAWC,EAAK,OAAQE,EAAK,EAFvDe,EAIH,SAACjB,GAAW,OAAKD,EAAQC,EAAK,SAAS,EC/BpCkB,EAAa,SAACC,GACzB,OAAOF,EAAqB,YAAaE,EAC3C,EAEaC,EAAgB,SAACC,GAC5B,OAAOJ,EAAc,aAADK,OAAcD,GACpC,ECGaE,EAAyB,SAAChG,GACrC,IAAQiG,EAAiBjG,EAAjBiG,aAERzE,EAAgCC,mBAAoB,IAAGC,EAAAC,YAAAH,EAAA,GAAhD0E,EAAQxE,EAAA,GAAEyE,EAAWzE,EAAA,GAC5BI,EAA0CL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAAlDsE,EAAarE,EAAA,GAAEsE,EAAgBtE,EAAA,GACtCG,EAAkCT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAA1Cb,EAASc,EAAA,GAAEmE,EAAYnE,EAAA,GAC9BG,EAA8Bb,oBAAS,GAAMc,EAAAZ,YAAAW,EAAA,GAAtCiE,EAAOhE,EAAA,GAAEiE,EAAUjE,EAAA,GAEpBkE,EAAa,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACD,OAAnBb,GAAa,GAAMW,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EDtBKrG,ECyBuBmF,EAAa7F,GDxBvDsF,EAAU,oBAAAK,OAAgCjF,ICwBiB,KAAD,EAAvDiG,EAAkBE,EAAAG,KAExBjB,EAAYY,GAAoBE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,SAEhCT,GAAW,GAAM,QAEG,OAFHS,EAAAC,KAAA,GAEjBZ,GAAa,GAAOW,EAAAK,OAAA,6BAAAL,EAAAM,OD/BC,IAACzG,CC+BF,GAAAgG,EAAA,wBAEvB,kBAZkB,OAAAJ,EAAAc,MAAA,KAAA5C,UAAA,KAcb6C,EAAgBC,sBAAW,eAAAC,EAAAhB,YAAAC,cAAAC,MAC/B,SAAAe,EAAOhC,GAAuB,IAAAiC,EAAAC,EAAA,OAAAlB,cAAAI,MAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,OAMD,OAL3Bb,GAAa,GAAMyB,EAAAb,KAAA,EAGXW,EAAYG,wBAAA,GACbpC,GAAU,IACb9E,OAAQmF,EAAa7F,KAAE2H,EAAAZ,KAAA,EAGHxB,EAAWkC,GAAc,KAAD,EAAxCC,EAAOC,EAAAX,KAEbjB,GAAY,SAAA8B,GAAS,SAAAlC,OAAAmC,YAAQD,GAAS,CAAEH,GAAU,IAAAC,EAAAZ,KAAA,gBAAAY,EAAAb,KAAA,EAAAa,EAAAV,GAAAU,EAAA,SAElDvB,GAAW,GAAM,QAEG,OAFHuB,EAAAb,KAAA,GAEjBZ,GAAa,GAAOyB,EAAAT,OAAA,6BAAAS,EAAAR,OAAA,GAAAK,EAAA,wBAEvB,gBAAAO,GAAA,OAAAR,EAAAH,MAAA,KAAA5C,UAAA,EAlB8B,GAkB5B,IAGCwD,EAAa,eAAAC,EAAA1B,YAAAC,cAAAC,MAAG,SAAAyB,EAAOxC,GAAiB,OAAAc,cAAAI,MAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OAIvC,OAJuCoB,EAAArB,KAAA,EAE1Cf,GAAY,SAAA8B,GACV,OAAOA,EAAUO,QAAO,SAAAC,GAAK,OAAAA,EAAFrI,KAAgB0F,CAAS,GACtD,IAAGyC,EAAApB,KAAA,EAEGtB,EAAcC,GAAW,KAAD,EAAAyC,EAAApB,KAAA,eAAAoB,EAAArB,KAAA,EAAAqB,EAAAlB,GAAAkB,EAAA,SAE9B/B,GAAW,GAAM,wBAAA+B,EAAAhB,OAAA,GAAAe,EAAA,kBAEpB,gBAVkBI,GAAA,OAAAL,EAAAb,MAAA,KAAA5C,UAAA,KAYb+D,GAAczC,EAASrB,SAAW0B,IAAYlF,EAC9CuH,GAAmBxC,IAAkBG,IAAYlF,EAOvD,OALAwH,qBAAU,WACRpC,IACAJ,GAAiB,EACnB,GAAG,CAACJ,IAGFxF,cAAA,OAAKC,UAAU,UAAU,UAAQ,cAAaF,SAC5CD,eAAA,OAAKG,UAAU,UAAU,UAAQ,cAAaF,SAAA,CAC5CD,eAAA,OAAKG,UAAU,QAAOF,SAAA,CACpBC,cAAA,MAAI,UAAQ,YAAWD,SAAA,IAAAuF,OAChBE,EAAa7F,GAAE,MAAA2F,OAAKE,EAAa5F,SAGxCI,cAAA,KAAG,UAAQ,WAAUD,SAClByF,EAAapC,UAIlBtD,eAAA,OAAKG,UAAU,QAAOF,SAAA,CACnBa,GACCZ,cAACS,EAAM,IAGRqF,GACC9F,cAAA,OACEC,UAAU,yBACV,UAAQ,gBAAeF,SACxB,yBAKFmI,GACClI,cAAA,KACEC,UAAU,aACV,UAAQ,oBAAmBF,SAC5B,oBAKF0F,EAASrB,OAAS,GACjBpE,cAAA,KAAGC,UAAU,aAAYF,SAAC,cAK3B0F,EAASjF,KAAI,SAAA6G,GACZ,IACElG,EAIEkG,EAJFlG,KACAiC,EAGEiE,EAHFjE,KACA7B,EAEE8F,EAFF9F,MACA5B,EACE0H,EADF1H,GAGF,OACEG,eAAA,WACEG,UAAU,mBACV,UAAQ,UAASF,SAAA,CAEjBD,eAAA,OAAKG,UAAU,iBAAgBF,SAAA,CAC7BC,cAAA,KACEqI,KAAI,UAAA/C,OAAY/D,GAChB,UAAQ,gBAAexB,SAEtBoB,IAEHnB,cAAA,UACE,UAAQ,gBACRE,KAAK,SACLD,UAAU,kBACV,aAAW,SACXG,QAAS,kBAAMuH,EAAchI,EAAG,EAACI,SAClC,qBAKHC,cAAA,OACEC,UAAU,eACV,UAAQ,cAAaF,SAEpBqD,MAIT,IAEC+E,GACCnI,cAAA,UACE,UAAQ,qBACRE,KAAK,SACLD,UAAU,iBACVG,QAAS,kBAAMwF,GAAiB,EAAK,EAAC7F,SACvC,uBAMJ4F,GACC3F,cAACU,EAAc,CACbC,aAAcqG,EACdpG,UAAWA,QAMvB,EC9Ka0H,EAAgC,SAAC/I,GAC5C,IAAQgJ,EAAwBhJ,EAAxBgJ,MAAOC,EAAiBjJ,EAAjBiJ,aACfzH,EAA4BC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAApC0H,EAAMxH,EAAA,GAAEyH,EAASzH,EAAA,GACxBI,EAAsCL,mBAAS,iBAAgBM,EAAAJ,YAAAG,EAAA,GAAxDsH,EAAWrH,EAAA,GAAEsH,EAActH,EAAA,GAC5BuH,EAAWC,iBAAuB,MAExCV,qBAAU,WACR,IAAMW,EAAc,SAAC/F,GAAuB,IAADgG,EACnC1F,EAASN,EAAMM,OAEA,QAAjB0F,EAACH,EAASI,eAAO,IAAAD,GAAhBA,EAAkBE,SAAS5F,IAC9BoF,GAAU,EAEd,EAIA,OAFAS,SAASC,iBAAiB,QAASL,GAE5B,WACLI,SAASE,oBAAoB,QAASN,EACxC,CACF,GAAG,IAYH,OACEjJ,eAAA,OACE,UAAQ,eACRwJ,IAAKT,EACL5I,UAAWE,IAAG,WAAY,CACxB,YAAasI,IACZ1I,SAAA,CAEHC,cAAA,OAAKC,UAAU,mBAAkBF,SAC/BD,eAAA,UACEI,KAAK,SACLD,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdG,QAxBW,WACjBsI,GAAU,SAAAlB,GAAS,OAAKA,CAAS,GACnC,EAsB4BzH,SAAA,CAEpBC,cAAA,QAAAD,SACG4I,IAGH3I,cAAA,QAAMC,UAAU,gBAAeF,SAC7BC,cAAA,KAAGC,UAAU,oBAAoB,cAAY,gBAKnDD,cAAA,OACEC,UAAU,gBACVN,GAAG,gBACH4J,KAAK,OAAMxJ,SAEXC,cAAA,OAAKC,UAAU,mBAAkBF,SAC9BwI,EAAM/H,KAAI,SAAAgJ,GACT,IAAQ7J,EAAa6J,EAAb7J,GAAIwB,EAASqI,EAATrI,KAEZ,OACEnB,cAAA,KAEEqI,KAAI,SAAA/C,OAAW3F,GACfM,UAAWE,IAAG,gBAAiB,CAC7B,YAAawI,IAAgBa,EAAKrI,OAEpCf,QAAS,kBAhDF,SAACoJ,GACpBhB,EAAagB,GACbd,GAAU,GACVE,EAAeY,EAAKrI,KACtB,CA4C6BsI,CAAaD,EAAK,EAACzJ,SAEjCoB,GAPIxB,EAUX,UAKV,ECzEa+J,EAAU,WACrB,IAAA3I,EAA0BC,mBAAiB,IAAGC,EAAAC,YAAAH,EAAA,GAAvCwH,EAAKtH,EAAA,GAAE0I,EAAQ1I,EAAA,GACtBI,EAA0BL,mBAAiB,IAAGM,EAAAJ,YAAAG,EAAA,GAAvCd,EAAKe,EAAA,GAAEsI,EAAQtI,EAAA,GACtBG,EAA4CT,mBAAS,GAAEU,EAAAR,YAAAO,EAAA,GAAhDoI,EAAcnI,EAAA,GAAEoI,EAAiBpI,EAAA,GACxCG,EAA4Cb,mBAAS,GAAEc,EAAAZ,YAAAW,EAAA,GAAhDnC,EAAcoC,EAAA,GAAEiI,EAAiBjI,EAAA,GACxCG,EAA8BjB,oBAAS,GAAMkB,EAAAhB,YAAAe,EAAA,GAAtC+H,EAAO9H,EAAA,GAAE+H,EAAU/H,EAAA,GAC1BG,EAA8BrB,oBAAS,GAAMsB,EAAApB,YAAAmB,EAAA,GAAtCyD,EAAOxD,EAAA,GAAEyD,EAAUzD,EAAA,GAC1BG,EAAkCzB,oBAAS,GAAM0B,EAAAxB,YAAAuB,EAAA,GAA1C7B,EAAS8B,EAAA,GAAEmD,EAAYnD,EAAA,GAExBwH,EAAU,eAAAjE,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAA8D,EAAA,OAAAhE,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,ECzBZzB,EAAmB,UD2BmB,KAAD,EAAlCkF,EAAe3D,EAAAG,KAErBgD,EAASQ,GAAiB3D,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAI,GAAAJ,EAAA,SAE1BT,GAAW,GAAM,yBAAAS,EAAAM,OAAA,GAAAT,EAAA,kBAEpB,kBARe,OAAAJ,EAAAc,MAAA,KAAA5C,UAAA,KAUViG,EAAc,eAAAlD,EAAAhB,YAAAC,cAAAC,MAAG,SAAAe,IAAA,IAAAkD,EAAA,OAAAlE,cAAAI,MAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,OAGH,OAFlBuD,GAAW,GACXpE,GAAa,GACbE,GAAW,GAAOuB,EAAAb,KAAA,EAAAa,EAAAZ,KAAA,EEtCbzB,EAAU,iBAAAK,OFyC0BuE,IAAgB,KAAD,EAEvB,KAFzBQ,EAAe/C,EAAAX,MAEDvC,QAClB6F,GAAW,GAGbL,EAASS,GAAiB/C,EAAAZ,KAAA,iBAAAY,EAAAb,KAAA,GAAAa,EAAAV,GAAAU,EAAA,SAE1BvB,GAAW,GAAM,QAEG,OAFHuB,EAAAb,KAAA,GAEjBZ,GAAa,GAAOyB,EAAAT,OAAA,6BAAAS,EAAAR,OAAA,GAAAK,EAAA,yBAEvB,kBAlBmB,OAAAD,EAAAH,MAAA,KAAA5C,UAAA,KAoBdmG,EAAmBrD,uBAAY,SAACuC,GAChCA,EAAK7J,KAAOkK,IACdC,EAAkBN,EAAK7J,IACvBoK,EAAkB,GAClBH,EAAS,IAEb,GAAG,CAACC,IAEErE,EAAe+E,mBAAQ,WAC3B,OAAOhK,EAAMiK,MAAK,SAAA5C,GAAK,OAAAA,EAAFjI,KAAgBD,CAAc,GACrD,GAAG,CAACA,IAYJ,OAVA0I,qBAAU,WACJyB,GACFO,GAEJ,GAAG,CAACP,IAEJzB,qBAAU,WACR8B,GACF,GAAG,IAGDlK,cAAA,QAAMC,UAAU,UAASF,SACvBC,cAAA,OAAKC,UAAU,YAAWF,SACxBD,eAAA,OAAKG,UAAU,mBAAkBF,SAAA,CAC/BC,cAAA,OAAKC,UAAU,iBAAgBF,SAC7BD,eAAA,OAAKG,UAAU,+BAA8BF,SAAA,CAC3CC,cAAA,OAAKC,UAAU,QAAOF,SACpBC,cAACsI,EAAY,CACXC,MAAOA,EACPC,aAAc8B,MAIlBxK,eAAA,OAAKG,UAAU,QAAQ,UAAQ,cAAaF,SAAA,EACxC8J,GACA7J,cAAA,KAAG,UAAQ,iBAAgBD,SAAC,qBAK7Ba,GACCZ,cAACS,EAAM,IAGRqF,GACC9F,cAAA,OACEC,UAAU,yBACV,UAAQ,oBAAmBF,SAC5B,0BAKFiK,GACChK,cAAA,OACEC,UAAU,0BACV,UAAQ,aAAYF,SACrB,iBAKFQ,EAAM6D,OAAS,GACdpE,cAACM,EAAS,CACRC,MAAOA,EACPb,eAAgBA,EAChBD,aAAcsK,YAOxB/J,cAAA,OACE,UAAQ,UACRC,UAAWE,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiBT,EAAiB,IACpCK,SAEFC,cAAA,OAAKC,UAAU,gCAA+BF,SAC3CyF,GACCxF,cAACuF,EAAW,CACVC,aAAcA,cAShC,EGxJAiF,IAASC,OACP1K,cAAC0J,EAAG,IACJP,SAASwB,eAAe,Q","file":"static/js/main.071735a0.chunk.js","sourcesContent":["import { FC } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../../types/Post';\n\ninterface Props {\n  post: Post,\n  selectedPostId: number,\n  onPostSelect: (post: number) => void\n}\n\nexport const PostItem: FC<Props> = (props) => {\n  const { post, onPostSelect, selectedPostId } = props;\n  const { id, title } = post;\n\n  const handleSelectPost = (postId: number) => {\n    if (postId === selectedPostId) {\n      onPostSelect(0);\n\n      return;\n    }\n\n    onPostSelect(postId);\n  };\n\n  const isSelected = selectedPostId === id;\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">\n        {id}\n      </td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn('button is-link', {\n            'is-light': !isSelected,\n          })}\n          onClick={() => handleSelectPost(id)}\n        >\n          {isSelected\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { Post } from '../../types/Post';\nimport { PostItem } from '../PostItem/PostItem';\n\ninterface Props {\n  posts: Post[],\n  selectedPostId: number,\n  onPostSelect: (postId: number) => void\n}\n\nexport const PostsList: FC<Props> = (props) => {\n  const {\n    posts,\n    onPostSelect,\n    selectedPostId,\n  } = props;\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              key={post.id}\n              post={post}\n              onPostSelect={onPostSelect}\n              selectedPostId={selectedPostId}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport cn from 'classnames';\nimport { CommentData } from '../../types/Comment';\nimport { useForm } from '../../hooks/useForm';\n\ninterface Props {\n  isLoading: boolean;\n  onAddComment: (comment: CommentData) => void;\n}\n\nexport const NewCommentForm: FC<Props> = (props) => {\n  const { onAddComment, isLoading } = props;\n  const {\n    name,\n    email,\n    commentText,\n    nameError,\n    emailError,\n    commentError,\n    notValidEmail,\n    handleSubmit,\n    handleClear,\n    handleEmailChange,\n    handleNameChange,\n    handleTextChange,\n  } = useForm({ onAddComment });\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': nameError,\n            })}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': emailError,\n            })}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n        {(!emailError && notValidEmail) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is not valid\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={commentText}\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': commentError,\n            })}\n            onChange={handleTextChange}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/*  eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { ChangeEvent, FormEvent, useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ninterface Options {\n  onAddComment: (comment: CommentData) => void\n}\n\nexport const useForm = (options: Options) => {\n  const { onAddComment } = options;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [notValidEmail, setNotValidEmail] = useState(false);\n  const [commentError, setCommentError] = useState(false);\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name.trim()) {\n      setNameError(true);\n    }\n\n    if (!email.trim()) {\n      setEmailError(true);\n    }\n\n    if (!commentText.trim()) {\n      setCommentError(true);\n    }\n\n    if (!emailRegex.test(email)) {\n      setNotValidEmail(true);\n    }\n\n    const isError = (\n      !name.trim()\n      || !email.trim()\n      || !commentText.trim()\n      || !emailRegex.test(email)\n    );\n\n    if (isError) {\n      return;\n    }\n\n    const newComment = {\n      name,\n      email,\n      body: commentText,\n    };\n\n    onAddComment(newComment);\n    setCommentText('');\n  };\n\n  const handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setNameError(false);\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setEmailError(false);\n    setEmail(event.target.value);\n    setNotValidEmail(false);\n  };\n\n  const handleTextChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentError(false);\n    setCommentText(event.target.value);\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setCommentText('');\n    setCommentError(false);\n    setEmailError(false);\n    setNameError(false);\n    setNotValidEmail(false);\n  };\n\n  return {\n    name,\n    email,\n    commentText,\n    nameError,\n    emailError,\n    commentError,\n    notValidEmail,\n    handleClear,\n    handleSubmit,\n    handleEmailChange,\n    handleNameChange,\n    handleTextChange,\n  };\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { CommentData, Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (newComment: CommentData) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { Comment, CommentData } from '../../types/Comment';\nimport { addComment, getComments, removeComment } from '../../api/comments';\n\ninterface Props {\n  selectedPost: Post,\n}\n\nexport const PostDetails: FC<Props> = (props) => {\n  const { selectedPost } = props;\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const fetchComments = async () => {\n    setIsLoading(true);\n\n    try {\n      const commentsFromServer = await getComments(selectedPost.id);\n\n      setComments(commentsFromServer);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addNewComment = useCallback(\n    async (newComment: CommentData) => {\n      setIsLoading(true);\n\n      try {\n        const commentToAdd = {\n          ...newComment,\n          postId: selectedPost.id,\n        };\n\n        const comment = await addComment(commentToAdd);\n\n        setComments(prevState => [...prevState, comment]);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }, [],\n  );\n\n  const deleteComment = async (commentId: number) => {\n    try {\n      setComments(prevState => {\n        return prevState.filter(({ id }) => id !== commentId);\n      });\n\n      await removeComment(commentId);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  const noComments = !comments.length && !isError && !isLoading;\n  const isVisibleButton = !isFormVisible && !isError && !isLoading;\n\n  useEffect(() => {\n    fetchComments();\n    setIsFormVisible(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isError && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {noComments && (\n            <p\n              className=\"title is-4\"\n              data-cy=\"NoCommentsMessage\"\n            >\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <p className=\"title is-4\">\n              Comments:\n            </p>\n          )}\n\n          {comments.map(comment => {\n            const {\n              name,\n              body,\n              email,\n              id,\n            } = comment;\n\n            return (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a\n                    href={`mailto:${email}`}\n                    data-cy=\"CommentAuthor\"\n                  >\n                    {name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div\n                  className=\"message-body\"\n                  data-cy=\"CommentBody\"\n                >\n                  {body}\n                </div>\n              </article>\n            );\n          })}\n\n          {isVisibleButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsFormVisible(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormVisible && (\n          <NewCommentForm\n            onAddComment={addNewComment}\n            isLoading={isLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../../types/User';\n\ninterface Props {\n  users: User[];\n  onUserSelect: (user: User) => void\n}\n\nexport const UserSelector: React.FC<Props> = (props) => {\n  const { users, onUserSelect } = props;\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentUser, setCurrentUser] = useState('Choose a user');\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClick = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n\n      if (!dropdown.current?.contains(target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  const handleOpen = () => {\n    setIsOpen(prevState => !prevState);\n  };\n\n  const handleSelect = (user: User) => {\n    onUserSelect(user);\n    setIsOpen(false);\n    setCurrentUser(user.name);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      ref={dropdown}\n      className={cn('dropdown', {\n        'is-active': isOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpen}\n        >\n          <span>\n            {currentUser}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                key={id}\n                href={`#user-${id}`}\n                className={cn('dropdown-item', {\n                  'is-active': currentUser === user.name,\n                })}\n                onClick={() => handleSelect(user)}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [noPosts, setNoPosts] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchUsers = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  const fetchUserPosts = async () => {\n    setNoPosts(false);\n    setIsLoading(true);\n    setIsError(false);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      if (postsFromServer.length === 0) {\n        setNoPosts(true);\n      }\n\n      setPosts(postsFromServer);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSelectUser = useCallback((user: User) => {\n    if (user.id !== selectedUserId) {\n      setSelectedUserId(user.id);\n      setSelectedPostId(0);\n      setPosts([]);\n    }\n  }, [selectedUserId]);\n\n  const selectedPost = useMemo(() => {\n    return posts.find(({ id }) => id === selectedPostId);\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      fetchUserPosts();\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserSelect={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {noPosts && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPostId}\n                    onPostSelect={setSelectedPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPostId > 0 },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}